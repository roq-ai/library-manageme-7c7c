generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model book {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String        @db.VarChar(255)
  author      String        @db.VarChar(255)
  library_id  String?       @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  isbn_id     String        @unique @db.Uuid
  isbn        isbn          @relation(fields: [isbn_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  library     library?      @relation(fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  borrowing   borrowing[]
  reservation reservation[]
}

model borrowing {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id     String?   @db.Uuid
  user_id     String?   @db.Uuid
  borrow_date DateTime  @db.Date
  return_date DateTime? @db.Date
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  book        book?     @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model isbn {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  number     String?  @db.VarChar(255)
  book       book?
}

model library {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  book        book[]
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reservation {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_id    String?  @db.Uuid
  user_id    String?  @db.Uuid
  due_date   DateTime @db.Date
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  book       book?    @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  borrowing   borrowing[]
  library     library[]
  reservation reservation[]
}
